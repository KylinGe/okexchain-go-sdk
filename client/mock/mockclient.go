// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tendermint/tendermint/rpc/client (interfaces: Client)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	common "github.com/tendermint/tendermint/libs/common"
	log "github.com/tendermint/tendermint/libs/log"
	client "github.com/tendermint/tendermint/rpc/client"
	core_types "github.com/tendermint/tendermint/rpc/core/types"
	types "github.com/tendermint/tendermint/types"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ABCIInfo mocks base method
func (m *MockClient) ABCIInfo() (*core_types.ResultABCIInfo, error) {
	ret := m.ctrl.Call(m, "ABCIInfo")
	ret0, _ := ret[0].(*core_types.ResultABCIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABCIInfo indicates an expected call of ABCIInfo
func (mr *MockClientMockRecorder) ABCIInfo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABCIInfo", reflect.TypeOf((*MockClient)(nil).ABCIInfo))
}

// ABCIQuery mocks base method
func (m *MockClient) ABCIQuery(arg0 string, arg1 common.HexBytes) (*core_types.ResultABCIQuery, error) {
	ret := m.ctrl.Call(m, "ABCIQuery", arg0, arg1)
	ret0, _ := ret[0].(*core_types.ResultABCIQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABCIQuery indicates an expected call of ABCIQuery
func (mr *MockClientMockRecorder) ABCIQuery(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABCIQuery", reflect.TypeOf((*MockClient)(nil).ABCIQuery), arg0, arg1)
}

// ABCIQueryWithOptions mocks base method
func (m *MockClient) ABCIQueryWithOptions(arg0 string, arg1 common.HexBytes, arg2 client.ABCIQueryOptions) (*core_types.ResultABCIQuery, error) {
	ret := m.ctrl.Call(m, "ABCIQueryWithOptions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*core_types.ResultABCIQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABCIQueryWithOptions indicates an expected call of ABCIQueryWithOptions
func (mr *MockClientMockRecorder) ABCIQueryWithOptions(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABCIQueryWithOptions", reflect.TypeOf((*MockClient)(nil).ABCIQueryWithOptions), arg0, arg1, arg2)
}

// Block mocks base method
func (m *MockClient) Block(arg0 *int64) (*core_types.ResultBlock, error) {
	ret := m.ctrl.Call(m, "Block", arg0)
	ret0, _ := ret[0].(*core_types.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block
func (mr *MockClientMockRecorder) Block(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockClient)(nil).Block), arg0)
}

// BlockResults mocks base method
func (m *MockClient) BlockResults(arg0 *int64) (*core_types.ResultBlockResults, error) {
	ret := m.ctrl.Call(m, "BlockResults", arg0)
	ret0, _ := ret[0].(*core_types.ResultBlockResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockResults indicates an expected call of BlockResults
func (mr *MockClientMockRecorder) BlockResults(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockResults", reflect.TypeOf((*MockClient)(nil).BlockResults), arg0)
}

// BlockchainInfo mocks base method
func (m *MockClient) BlockchainInfo(arg0, arg1 int64) (*core_types.ResultBlockchainInfo, error) {
	ret := m.ctrl.Call(m, "BlockchainInfo", arg0, arg1)
	ret0, _ := ret[0].(*core_types.ResultBlockchainInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockchainInfo indicates an expected call of BlockchainInfo
func (mr *MockClientMockRecorder) BlockchainInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockchainInfo", reflect.TypeOf((*MockClient)(nil).BlockchainInfo), arg0, arg1)
}

// BroadcastTxAsync mocks base method
func (m *MockClient) BroadcastTxAsync(arg0 types.Tx) (*core_types.ResultBroadcastTx, error) {
	ret := m.ctrl.Call(m, "BroadcastTxAsync", arg0)
	ret0, _ := ret[0].(*core_types.ResultBroadcastTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxAsync indicates an expected call of BroadcastTxAsync
func (mr *MockClientMockRecorder) BroadcastTxAsync(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxAsync", reflect.TypeOf((*MockClient)(nil).BroadcastTxAsync), arg0)
}

// BroadcastTxCommit mocks base method
func (m *MockClient) BroadcastTxCommit(arg0 types.Tx) (*core_types.ResultBroadcastTxCommit, error) {
	ret := m.ctrl.Call(m, "BroadcastTxCommit", arg0)
	ret0, _ := ret[0].(*core_types.ResultBroadcastTxCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxCommit indicates an expected call of BroadcastTxCommit
func (mr *MockClientMockRecorder) BroadcastTxCommit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxCommit", reflect.TypeOf((*MockClient)(nil).BroadcastTxCommit), arg0)
}

// BroadcastTxSync mocks base method
func (m *MockClient) BroadcastTxSync(arg0 types.Tx) (*core_types.ResultBroadcastTx, error) {
	ret := m.ctrl.Call(m, "BroadcastTxSync", arg0)
	ret0, _ := ret[0].(*core_types.ResultBroadcastTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTxSync indicates an expected call of BroadcastTxSync
func (mr *MockClientMockRecorder) BroadcastTxSync(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxSync", reflect.TypeOf((*MockClient)(nil).BroadcastTxSync), arg0)
}

// Commit mocks base method
func (m *MockClient) Commit(arg0 *int64) (*core_types.ResultCommit, error) {
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(*core_types.ResultCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit
func (mr *MockClientMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockClient)(nil).Commit), arg0)
}

// ConsensusState mocks base method
func (m *MockClient) ConsensusState() (*core_types.ResultConsensusState, error) {
	ret := m.ctrl.Call(m, "ConsensusState")
	ret0, _ := ret[0].(*core_types.ResultConsensusState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsensusState indicates an expected call of ConsensusState
func (mr *MockClientMockRecorder) ConsensusState() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusState", reflect.TypeOf((*MockClient)(nil).ConsensusState))
}

// DumpConsensusState mocks base method
func (m *MockClient) DumpConsensusState() (*core_types.ResultDumpConsensusState, error) {
	ret := m.ctrl.Call(m, "DumpConsensusState")
	ret0, _ := ret[0].(*core_types.ResultDumpConsensusState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpConsensusState indicates an expected call of DumpConsensusState
func (mr *MockClientMockRecorder) DumpConsensusState() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpConsensusState", reflect.TypeOf((*MockClient)(nil).DumpConsensusState))
}

// Genesis mocks base method
func (m *MockClient) Genesis() (*core_types.ResultGenesis, error) {
	ret := m.ctrl.Call(m, "Genesis")
	ret0, _ := ret[0].(*core_types.ResultGenesis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Genesis indicates an expected call of Genesis
func (mr *MockClientMockRecorder) Genesis() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Genesis", reflect.TypeOf((*MockClient)(nil).Genesis))
}

// Health mocks base method
func (m *MockClient) Health() (*core_types.ResultHealth, error) {
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(*core_types.ResultHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health
func (mr *MockClientMockRecorder) Health() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockClient)(nil).Health))
}

// IsRunning mocks base method
func (m *MockClient) IsRunning() bool {
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning
func (mr *MockClientMockRecorder) IsRunning() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockClient)(nil).IsRunning))
}

// NetInfo mocks base method
func (m *MockClient) NetInfo() (*core_types.ResultNetInfo, error) {
	ret := m.ctrl.Call(m, "NetInfo")
	ret0, _ := ret[0].(*core_types.ResultNetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetInfo indicates an expected call of NetInfo
func (mr *MockClientMockRecorder) NetInfo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetInfo", reflect.TypeOf((*MockClient)(nil).NetInfo))
}

// NumUnconfirmedTxs mocks base method
func (m *MockClient) NumUnconfirmedTxs() (*core_types.ResultUnconfirmedTxs, error) {
	ret := m.ctrl.Call(m, "NumUnconfirmedTxs")
	ret0, _ := ret[0].(*core_types.ResultUnconfirmedTxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumUnconfirmedTxs indicates an expected call of NumUnconfirmedTxs
func (mr *MockClientMockRecorder) NumUnconfirmedTxs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumUnconfirmedTxs", reflect.TypeOf((*MockClient)(nil).NumUnconfirmedTxs))
}

// OnReset mocks base method
func (m *MockClient) OnReset() error {
	ret := m.ctrl.Call(m, "OnReset")
	ret0, _ := ret[0].(error)
	return ret0
}

// OnReset indicates an expected call of OnReset
func (mr *MockClientMockRecorder) OnReset() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReset", reflect.TypeOf((*MockClient)(nil).OnReset))
}

// OnStart mocks base method
func (m *MockClient) OnStart() error {
	ret := m.ctrl.Call(m, "OnStart")
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStart indicates an expected call of OnStart
func (mr *MockClientMockRecorder) OnStart() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockClient)(nil).OnStart))
}

// OnStop mocks base method
func (m *MockClient) OnStop() {
	m.ctrl.Call(m, "OnStop")
}

// OnStop indicates an expected call of OnStop
func (mr *MockClientMockRecorder) OnStop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStop", reflect.TypeOf((*MockClient)(nil).OnStop))
}

// Quit mocks base method
func (m *MockClient) Quit() <-chan struct{} {
	ret := m.ctrl.Call(m, "Quit")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Quit indicates an expected call of Quit
func (mr *MockClientMockRecorder) Quit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockClient)(nil).Quit))
}

// Reset mocks base method
func (m *MockClient) Reset() error {
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (mr *MockClientMockRecorder) Reset() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockClient)(nil).Reset))
}

// SetLogger mocks base method
func (m *MockClient) SetLogger(arg0 log.Logger) {
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger
func (mr *MockClientMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockClient)(nil).SetLogger), arg0)
}

// Start mocks base method
func (m *MockClient) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockClientMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClient)(nil).Start))
}

// Status mocks base method
func (m *MockClient) Status() (*core_types.ResultStatus, error) {
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*core_types.ResultStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockClientMockRecorder) Status() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockClient)(nil).Status))
}

// Stop mocks base method
func (m *MockClient) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockClientMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockClient)(nil).Stop))
}

// String mocks base method
func (m *MockClient) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockClientMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockClient)(nil).String))
}

// Subscribe mocks base method
func (m *MockClient) Subscribe(arg0 context.Context, arg1, arg2 string, arg3 ...int) (<-chan core_types.ResultEvent, error) {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(<-chan core_types.ResultEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockClientMockRecorder) Subscribe(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockClient)(nil).Subscribe), varargs...)
}

// Tx mocks base method
func (m *MockClient) Tx(arg0 []byte, arg1 bool) (*core_types.ResultTx, error) {
	ret := m.ctrl.Call(m, "Tx", arg0, arg1)
	ret0, _ := ret[0].(*core_types.ResultTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tx indicates an expected call of Tx
func (mr *MockClientMockRecorder) Tx(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockClient)(nil).Tx), arg0, arg1)
}

// TxSearch mocks base method
func (m *MockClient) TxSearch(arg0 string, arg1 bool, arg2, arg3 int) (*core_types.ResultTxSearch, error) {
	ret := m.ctrl.Call(m, "TxSearch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*core_types.ResultTxSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxSearch indicates an expected call of TxSearch
func (mr *MockClientMockRecorder) TxSearch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSearch", reflect.TypeOf((*MockClient)(nil).TxSearch), arg0, arg1, arg2, arg3)
}

// UnconfirmedTxs mocks base method
func (m *MockClient) UnconfirmedTxs(arg0 int) (*core_types.ResultUnconfirmedTxs, error) {
	ret := m.ctrl.Call(m, "UnconfirmedTxs", arg0)
	ret0, _ := ret[0].(*core_types.ResultUnconfirmedTxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnconfirmedTxs indicates an expected call of UnconfirmedTxs
func (mr *MockClientMockRecorder) UnconfirmedTxs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnconfirmedTxs", reflect.TypeOf((*MockClient)(nil).UnconfirmedTxs), arg0)
}

// Unsubscribe mocks base method
func (m *MockClient) Unsubscribe(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "Unsubscribe", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockClientMockRecorder) Unsubscribe(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockClient)(nil).Unsubscribe), arg0, arg1, arg2)
}

// UnsubscribeAll mocks base method
func (m *MockClient) UnsubscribeAll(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "UnsubscribeAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeAll indicates an expected call of UnsubscribeAll
func (mr *MockClientMockRecorder) UnsubscribeAll(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeAll", reflect.TypeOf((*MockClient)(nil).UnsubscribeAll), arg0, arg1)
}

// Validators mocks base method
func (m *MockClient) Validators(arg0 *int64) (*core_types.ResultValidators, error) {
	ret := m.ctrl.Call(m, "Validators", arg0)
	ret0, _ := ret[0].(*core_types.ResultValidators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validators indicates an expected call of Validators
func (mr *MockClientMockRecorder) Validators(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockClient)(nil).Validators), arg0)
}
